// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pubsub_ui.proto

package pubsubuiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	pubsubui "github.com/xhsun/gcp-pubsub-ui/pubsub-ui-server/internal/pubsubui"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PubSubUIName is the fully-qualified name of the PubSubUI service.
	PubSubUIName = "pubsubui.PubSubUI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PubSubUIFetchProcedure is the fully-qualified name of the PubSubUI's Fetch RPC.
	PubSubUIFetchProcedure = "/pubsubui.PubSubUI/Fetch"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	pubSubUIServiceDescriptor     = pubsubui.File_pubsub_ui_proto.Services().ByName("PubSubUI")
	pubSubUIFetchMethodDescriptor = pubSubUIServiceDescriptor.Methods().ByName("Fetch")
)

// PubSubUIClient is a client for the pubsubui.PubSubUI service.
type PubSubUIClient interface {
	// Fetch PubSub message from the provided PubSub Topic
	Fetch(context.Context, *connect.Request[pubsubui.TopicSubscription]) (*connect.ServerStreamForClient[pubsubui.Message], error)
}

// NewPubSubUIClient constructs a client for the pubsubui.PubSubUI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPubSubUIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PubSubUIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pubSubUIClient{
		fetch: connect.NewClient[pubsubui.TopicSubscription, pubsubui.Message](
			httpClient,
			baseURL+PubSubUIFetchProcedure,
			connect.WithSchema(pubSubUIFetchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// pubSubUIClient implements PubSubUIClient.
type pubSubUIClient struct {
	fetch *connect.Client[pubsubui.TopicSubscription, pubsubui.Message]
}

// Fetch calls pubsubui.PubSubUI.Fetch.
func (c *pubSubUIClient) Fetch(ctx context.Context, req *connect.Request[pubsubui.TopicSubscription]) (*connect.ServerStreamForClient[pubsubui.Message], error) {
	return c.fetch.CallServerStream(ctx, req)
}

// PubSubUIHandler is an implementation of the pubsubui.PubSubUI service.
type PubSubUIHandler interface {
	// Fetch PubSub message from the provided PubSub Topic
	Fetch(context.Context, *connect.Request[pubsubui.TopicSubscription], *connect.ServerStream[pubsubui.Message]) error
}

// NewPubSubUIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPubSubUIHandler(svc PubSubUIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pubSubUIFetchHandler := connect.NewServerStreamHandler(
		PubSubUIFetchProcedure,
		svc.Fetch,
		connect.WithSchema(pubSubUIFetchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pubsubui.PubSubUI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PubSubUIFetchProcedure:
			pubSubUIFetchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPubSubUIHandler returns CodeUnimplemented from all methods.
type UnimplementedPubSubUIHandler struct{}

func (UnimplementedPubSubUIHandler) Fetch(context.Context, *connect.Request[pubsubui.TopicSubscription], *connect.ServerStream[pubsubui.Message]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("pubsubui.PubSubUI.Fetch is not implemented"))
}
