// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pubsub_ui.proto

package pubsubui

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PubSubUIClient is the client API for PubSubUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PubSubUIClient interface {
	// Fetch PubSub message from the provided PubSub Topic
	Fetch(ctx context.Context, in *TopicSubscription, opts ...grpc.CallOption) (PubSubUI_FetchClient, error)
}

type pubSubUIClient struct {
	cc grpc.ClientConnInterface
}

func NewPubSubUIClient(cc grpc.ClientConnInterface) PubSubUIClient {
	return &pubSubUIClient{cc}
}

func (c *pubSubUIClient) Fetch(ctx context.Context, in *TopicSubscription, opts ...grpc.CallOption) (PubSubUI_FetchClient, error) {
	stream, err := c.cc.NewStream(ctx, &PubSubUI_ServiceDesc.Streams[0], "/pubsubui.PubSubUI/Fetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubUIFetchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubSubUI_FetchClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type pubSubUIFetchClient struct {
	grpc.ClientStream
}

func (x *pubSubUIFetchClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PubSubUIServer is the server API for PubSubUI service.
// All implementations must embed UnimplementedPubSubUIServer
// for forward compatibility
type PubSubUIServer interface {
	// Fetch PubSub message from the provided PubSub Topic
	Fetch(*TopicSubscription, PubSubUI_FetchServer) error
	mustEmbedUnimplementedPubSubUIServer()
}

// UnimplementedPubSubUIServer must be embedded to have forward compatible implementations.
type UnimplementedPubSubUIServer struct {
}

func (UnimplementedPubSubUIServer) Fetch(*TopicSubscription, PubSubUI_FetchServer) error {
	return status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedPubSubUIServer) mustEmbedUnimplementedPubSubUIServer() {}

// UnsafePubSubUIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PubSubUIServer will
// result in compilation errors.
type UnsafePubSubUIServer interface {
	mustEmbedUnimplementedPubSubUIServer()
}

func RegisterPubSubUIServer(s grpc.ServiceRegistrar, srv PubSubUIServer) {
	s.RegisterService(&PubSubUI_ServiceDesc, srv)
}

func _PubSubUI_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopicSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubSubUIServer).Fetch(m, &pubSubUIFetchServer{stream})
}

type PubSubUI_FetchServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type pubSubUIFetchServer struct {
	grpc.ServerStream
}

func (x *pubSubUIFetchServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// PubSubUI_ServiceDesc is the grpc.ServiceDesc for PubSubUI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PubSubUI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pubsubui.PubSubUI",
	HandlerType: (*PubSubUIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fetch",
			Handler:       _PubSubUI_Fetch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pubsub_ui.proto",
}
